name: last nest build # 현재 제목

on: # 이벤트를 등록
  push: # push 이벤트가 발생하면
    branches: # 어떤 브랜치에 이벤트가 발생할 때 작업을 동작시킨다.
      - master

jobs: # 작업의 단위
  Build: # 식별자
    runs-on: ubuntu-latest # 러너에서 사용할 OS 최신 버전 사용

    steps: # 작업의 가장 작은 단위
      - name: checkout # 작업의 작은 단위의 이름
        uses: actions/checkout@v4 # 레포지토리를 체크아웃할 수 있게 도와주는 라이브러리

      - name: set up node # 라이브러리를 사용할 것을 가져오고 with는 라이브러리의 속성 설정
        uses: actions/setup-node@v4 # 노드 버전을 가져오고
        with:
          node-version: "20" # 20 버전의 노드 런타임 환경을 제공

      - name: env
        run: |
          echo "USERNAME=${{ secrets.USERNAME }}" > .env
          cat .env # 생성된 .env 파일의 내용을 확인

      - name: test # 의존성을 설치하기 전에 폴더 구조 확인
        run: |
          ls -a # 숨김 파일을 포함한 모든 파일 리스트 출력
          pwd

      - name: npm install # 의존성 설치
        run: npm install

      - name: build nestjs # 빌드
        run: npm run build

      - name: build test # 빌드 파일 확인
        run: |
          ls -a # 숨김 파일을 포함한 모든 파일 리스트 출력
          pwd
          cd dist
          ls -a
          pwd

      - name: upload build
        uses: actions/upload-artifact@v4 # 빌드 결과물 저장, 빌드된 바이너리 패키지
        with:
          name: build-artifacts
          path: | # 아티팩트에 저장할 폴더나 파일들의 경로
            dist/
            package.json
            package-lock.json
            system.config.js

      - name: upload .env file
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: .env

      - name: ssh 접근할 키파일 생성
        run: |
          mkdir -p ~/.ssh 
          ls
          pwd
          echo "${{ secrets.AWS_SECRET_KEY }}" > ~/.ssh/aws_key
          chmod 600 ~/.ssh/aws_key
          ssh-keyscan -H ${{ secrets.HOST }} > ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: ec2 deploy # 배포 준비 단계, 배포하기 전에 생성할 폴더 및 파일 확인
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_SECRET_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/ubuntu
            rm -rf dist
            mkdir dist
            rm -rf package.json
            rm -rf package-lock.json
            rm -rf system.config.js
            rm -rf .env

      - name: EC2에 아티팩트 복사
        run: |
          scp -r -i ~/.ssh/aws_key ./dist/* ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/dist/
          scp -i ~/.ssh/aws_key package.json ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/
          scp -i ~/.ssh/aws_key package-lock.json ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/
          scp -i ~/.ssh/aws_key system.config.js ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/
          scp -i ~/.ssh/aws_key .env ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ubuntu/

      - name: ec2 npm install
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_SECRET_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/ubuntu
            ls
            pwd
            npm install

      - name: deploy to ec2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_SECRET_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/ubuntu
            pm2 reload system.config.js
